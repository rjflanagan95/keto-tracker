{"version":3,"sources":["components/Logger/logger.js","components/Graphs/graphs.js","components/Main/main.js","App.js","serviceWorker.js","index.js"],"names":["Logger","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mealDate","food","mealType","calories","protein","fat","carbs","submitMeal","bind","assertThisInitialized","target","setState","defineProperty","name","value","newMeal","logToMain","_this2","react_default","a","createElement","className","Container","Row","Col","xs","Form","Control","onChange","e","changeUserInput","type","as","onClick","Component","Graphs","meals","proteinCalories","fatCalories","carbCalories","totalCalories","renderGraph","setInterval","calProtein","calFat","calCarbs","totalCal","i","length","parseInt","data","labels","datasets","backgroundColor","hoverBackgroundColor","id","map","val","index","key","es","Main","logMeal","newMeals","push","Graphs_graphs","Logger_logger","App","Main_main","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35944134.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Row, Col, Form } from \"react-bootstrap\";\n\nimport \"./logger.css\";\n\nclass Logger extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        mealDate: \"\",\n        food: \"\",\n        mealType: \"\",\n        calories: 0,\n        protein: 0,\n        fat: 0,\n        carbs: 0,\n      }\n\n      this.submitMeal = this.submitMeal.bind(this);\n  }\n\n  changeUserInput(target) {\n    this.setState({\n      [target.name]: target.value\n    });\n  }\n\n  submitMeal() {\n    let newMeal = {\n      mealDate: this.state.mealDate,\n      food: this.state.food,\n      mealType: this.state.mealType,\n      calories: this.state.calories,\n      protein: this.state.protein,\n      fat: this.state.fat,\n      carbs: this.state.carbs\n    }\n\n    this.props.logToMain(newMeal);\n    this.setState({\n      mealDate: \"\",\n      food: \"\",\n      mealType: \"\",\n      calories: 0,\n      protein: 0,\n      fat: 0,\n      carbs: 0\n    })\n  }\n\n  render() {\n      const left = 4;\n      const right = 8;\n\n    return (\n      <div className=\"panel meal-logger\">\n        <div className=\"title\">Log a Meal</div>\n        <Container>\n            <Row className=\"form-row\">\n                <Col xs={left}>Date:</Col>\n                <Col xs={right}><Form.Control className=\"form-input\" onChange={(e) => this.changeUserInput(e.target)} name=\"mealDate\" value={this.state.mealDate} type=\"date\"/></Col>\n            </Row>\n            <Row className=\"form-row\">\n              <Col xs={left}>Food:</Col>\n              <Col xs={right}><Form.Control className=\"form-input\" onChange={(e) => this.changeUserInput(e.target)} name=\"food\" value={this.state.food} type=\"text\" /></Col>\n            </Row>\n            <Row className=\"form-row\">\n                <Col xs={left}>Meal:</Col>\n                <Col xs={right}>\n                    <Form.Control className=\"form-input\" as=\"select\" onChange={(e) => this.changeUserInput(e.target)} name=\"mealType\">\n                        <option value=\"Breakfast\">Breakfast</option>\n                        <option value=\"Lunch\">Lunch</option>\n                        <option value=\"Dinner\">Dinner</option>\n                        <option value=\"Snack\">Snack</option>\n                    </Form.Control>\n                </Col>\n            </Row>\n            <Row className=\"form-row\">\n                <Col xs={6}>Calories:</Col>\n                <Col xs={6}><Form.Control className=\"form-input log-number\" onChange={(e) => this.changeUserInput(e.target)} name=\"calories\" value={this.state.calories} type=\"number\" /></Col>\n            </Row>\n            <Row className=\"form-row\">\n                <Col xs={6}>Protein (grams):</Col>\n                <Col xs={6}><Form.Control className=\"form-input log-number\" onChange={(e) => this.changeUserInput(e.target)} name=\"protein\" value={this.state.protein} type=\"number\" /></Col>\n            </Row>\n            <Row className=\"form-row\">\n                <Col xs={6}>Fat (grams):</Col>\n                <Col xs={6}><Form.Control className=\"form-input log-number\" onChange={(e) => this.changeUserInput(e.target)} name=\"fat\" value={this.state.fat} type=\"number\" /></Col>\n            </Row>\n            <Row className=\"form-row\">\n                <Col xs={6}>Carbs (grams):</Col>\n                <Col xs={6}><Form.Control className=\"form-input log-number\" onChange={(e) => this.changeUserInput(e.target)} name=\"carbs\" value={this.state.carbs} type=\"number\" /></Col>\n            </Row>\n        </Container>\n        <div className=\"submit-row\">\n            <div className=\"log-button\" onClick={this.submitMeal} >Log Meal</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Logger;","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport \"./graphs.css\";\n\nimport { Doughnut } from \"react-chartjs-2\";\n\nclass Graphs extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      meals: this.props.meals,\n\n      proteinCalories: 0,\n      fatCalories: 0,\n      carbCalories: 0,\n      totalCalories: 0,\n\n    }\n    \n    this.renderGraph = this.renderGraph.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderGraph();\n    setInterval(this.renderGraph, 1000);\n  }\n\n  changeUserInput(target) {\n    this.setState({\n      [target.name]: target.value\n    });\n  }\n\n  renderGraph() {\n    let calProtein = 0;\n    let calFat = 0;\n    let calCarbs = 0;\n    let totalCal = 0;\n\n    for (let i = 0; i < this.state.meals.length; i++) {\n      calProtein += parseInt(this.state.meals[i].protein) * 4;\n      calFat += parseInt(this.state.meals[i].fat) * 9;\n      calCarbs += parseInt(this.state.meals[i].carbs) * 4;\n      totalCal += parseInt(this.state.meals[i].calories);\n    }\n\n    this.setState({\n      proteinCalories: calProtein,\n      fatCalories: calFat,\n      carbCalories: calCarbs,\n      totalCalories: totalCal\n    });\n  }\n\n  render() {\n    const data = {\n        labels: [\n            'Protein',\n            'Carbs',\n            'Fat'\n        ],\n        datasets: [{\n            data: [this.state.proteinCalories, this.state.carbCalories, this.state.fatCalories],\n            backgroundColor: [\n            '#011936',\n            '#F9DC5C',\n            '#A63D40'\n            ],\n            hoverBackgroundColor: [\n            '#2F425A',\n            '#FBE897',\n            '#B66062'\n            ]\n        }]\n    };\n    \n\n    return (\n      <div className=\"panel graph-panel\">\n        <Container>\n          <Row>\n            <Col xs={4}>\n              <div id=\"overview\" className=\"graph-card\">\n                <div className=\"title\">Overview</div>\n                <div className=\"overview-stats\">\n                  <div>Total Calories: {this.state.totalCalories}</div>\n                  <div>Calories from Protein: {this.state.proteinCalories}</div>\n                  <div>Calories from Fat: {this.state.fatCalories}</div>\n                  <div>Calories from Carbs: {this.state.carbCalories}</div>\n                </div>\n              </div>\n              <div id=\"food-list\" className=\"graph-card\">\n                <div className=\"title\">Today's Meals</div>\n                {this.state.meals.map((val, index) =>\n                <div className=\"food-item\" key={index}>\n                  <div className=\"food-item-title\">{val.food}</div>\n                  <div className=\"food-item-details\">\n                    <div className=\"food-item-date\">{val.mealType} - {val.mealDate}</div>\n                    <div>Calories: {val.calories}</div>\n                    <div>Protein: {val.protein}g</div>\n                    <div>Fat: {val.fat}g</div>\n                    <div>Carbs: {val.carbs}g</div>\n                  </div>\n                </div>\n                )}\n              </div>\n            </Col>\n            <Col xs={8}>\n              <div className=\"graph-card\">\n                <Doughnut data={data} />\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Graphs;","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./main.css\"\n\nimport Logger from \"../Logger/logger\";\nimport Graphs from \"../Graphs/graphs\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        meals: []\n      }\n  }\n\n  logMeal = (data) => {\n    let newMeals = this.state.meals;\n    newMeals.push(data);\n    this.setState({\n      meals: newMeals\n    });\n  }\n\n  render() {\n\n    return (\n      <Container className=\"main-container\">\n        <Row className=\"main-row\">\n          <Col xs={8}>\n            <Graphs meals={this.state.meals} />\n          </Col>\n          <Col xs={4}>\n            <Logger logToMain={this.logMeal} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\n\nimport Main from \"./components/Main/main\";\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n      <div className=\"footer\">\n        <a href=\"https://github.com/rjflanagan95/keto-tracker\">View the code on GitHub</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}